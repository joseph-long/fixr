name: Build and upload to PyPI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - ci-debug
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
            CIBW_BEFORE_BUILD: bash build_xrif_and_generate_bindings.sh

      - name: Test wheel
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install pytest
          pyver=$(python -c "import sys; print(f'{sys.version_info.major}{sys.version_info.minor}')")
          echo "Looking for wheel matching cp${pyver}"
          WHEEL=$(ls wheelhouse/*cp${pyver}*.whl | head -n 1 || true)
          if [ -z "$WHEEL" ]; then
            echo "No wheel found matching cp${pyver}"
            ls wheelhouse/
            exit 1
          fi
          echo "Installing $WHEEL"
          pip install "$WHEEL"
          pytest test_fixr.py

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
